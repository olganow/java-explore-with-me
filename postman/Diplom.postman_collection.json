{
	"info": {
		"_postman_id": "da58afb1-2aa9-4573-ba66-92e99efa2a31",
		"name": "Diplom.collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26991858"
	},
	"item": [
		{
			"name": "Statistics",
			"item": [
				{
					"name": "Hit 1 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2023-07-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit 2 create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/2\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2022-09-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with null app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": null,\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2023-07-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with null uri",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Test validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Validation Error');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": null,\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2023-07-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with null ip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Test validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Validation Error');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": null,\n  \"timestamp\": \"2023-07-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with null timestamp Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Test validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Validation Error');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with null bad timestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409/500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([409, 500]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2033-07-06 11:00:65\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with empty uri",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Test validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Validation Error');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2023-07-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with empty ip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Test validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Validation Error');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"\",\n  \"timestamp\": \"2023-07-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with empty app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Test validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Validation Error');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2023-07-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Hit create fail with empty timestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Test validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Validation Error');",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envStatService}}/hit"
					},
					"response": []
				},
				{
					"name": "Get stat 1 result false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test search stat response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test user 'app' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('app');",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');",
									"});",
									"",
									"pm.test(\"Test user 'uri' field\", function () {",
									"    var jsonData = pm.response.json();;",
									"    pm.expect(jsonData[0]).to.have.property('uri');",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');",
									"});",
									"",
									"pm.test(\"Test user 'hits' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('hits');",
									"    pm.expect(jsonData[0].hits).to.eql(1);",
									"      ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{envStatService}}/stats?start=2023-01-01%2001%3A02%3A33&end=2023-09-01%2001%3A02%3A33&unique=false",
							"host": [
								"{{envStatService}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2023-01-01%2001%3A02%3A33"
								},
								{
									"key": "end",
									"value": "2023-09-01%2001%3A02%3A33"
								},
								{
									"key": "unique",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get stat 2 results false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test search stat response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"pm.test(\"Check fields of the first object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('app');",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');",
									"    pm.expect(jsonData[0]).to.have.property('uri');",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');",
									"    pm.expect(jsonData[0]).to.have.property('hits');",
									"    pm.expect(jsonData[0].hits).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check fields of the first object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('app');",
									"    pm.expect(jsonData[1].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');",
									"    pm.expect(jsonData[1]).to.have.property('uri');",
									"    pm.expect(jsonData[1].uri, '\"uri\" must be \"/events/2\"').to.eql('/events/2');",
									"    pm.expect(jsonData[1]).to.have.property('hits');",
									"    pm.expect(jsonData[1].hits).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{envStatService}}/stats?start=2021-01-01%2001%3A02%3A33&end=2023-08-01%2001%3A02%3A33&unique=false",
							"host": [
								"{{envStatService}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2021-01-01%2001%3A02%3A33"
								},
								{
									"key": "end",
									"value": "2023-08-01%2001%3A02%3A33"
								},
								{
									"key": "unique",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get stat 1 result true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test search stat response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test user 'app' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('app');",
									"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');",
									"});",
									"",
									"pm.test(\"Test user 'uri' field\", function () {",
									"    var jsonData = pm.response.json();;",
									"    pm.expect(jsonData[0]).to.have.property('uri');",
									"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');",
									"});",
									"",
									"pm.test(\"Test user 'hits' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('hits');",
									"    pm.expect(jsonData[0].hits).to.eql(1);",
									"      ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{envStatService}}/stats?start=2023-01-01%2001%3A02%3A33&end=2023-09-01%2001%3A02%3A33&unique=true",
							"host": [
								"{{envStatService}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2023-01-01%2001%3A02%3A33"
								},
								{
									"key": "end",
									"value": "2023-09-01%2001%3A02%3A33"
								},
								{
									"key": "unique",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get stat 1 result fail start after end",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Test validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.eql('Validation Error');",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{envStatService}}/stats?start=2023-10-01%2001%3A02%3A33&end=2023-09-01%2001%3A02%3A33&unique=false",
							"host": [
								"{{envStatService}}"
							],
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2023-10-01%2001%3A02%3A33"
								},
								{
									"key": "end",
									"value": "2023-09-01%2001%3A02%3A33"
								},
								{
									"key": "unique",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main - admin: Users +",
			"item": [
				{
					"name": "User  add with id = 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.one@test.comz\"').to.eql('user.one@test.comz');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"User One\"').to.eql('User One');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.one@test.comz\",\n  \"name\": \"User One\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User  add with id = 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.second@test.comz\"').to.eql('user.second@test.comz');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"User Second\"').to.eql('User Second');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.second@test.comz\",\n  \"name\": \"User Second\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User  add with id = 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.third@test.comz\"').to.eql('user.third@test.comz');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"User Third\"').to.eql('User Third');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.third@test.comz\",\n  \"name\": \"User Third\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User  add with id = 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email, '\"email\" must be \"user.fourth@test.comz\"').to.eql('user.fourth@test.comz');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"User Fourth\"').to.eql('User Fourth');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.fourth@test.comz\",\n  \"name\": \"User Fourth\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User  add with id = 5 random",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.{{$randomInt}}@test.comz\",\n  \"name\": \"{{$randomFirstName}} {{$randomLastName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User add failed email field missed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"User Failed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User add failed email null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": null,\n  \"name\": \"User Failed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User add failed email empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"\",\n  \"name\": \"User Third\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User add failed email bad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.third\",\n  \"name\": \"User Third\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User add failed name field missed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.third@test.comz\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User add failed name null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.failed@test.comz\",\n  \"name\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User add failed name empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user.failed@test.comz\",\n  \"name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/users"
					},
					"response": []
				},
				{
					"name": "User get with id = [1]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test user 'email' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('email');",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"user.one@test.comz\"').to.eql('user.one@test.comz');",
									"});",
									"pm.test(\"Test user 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"User One\"').to.eql('User One');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/admin/users?ids=1&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "ids",
									"value": "1"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User get with id = [1,2]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test search user response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"pm.test(\"Check fields of the first user object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('email');",
									"    pm.expect(jsonData[0].email, '\"email\" must be \"user.one@test.comz\"').to.eql('user.one@test.comz');",
									"    pm.expect(jsonData[0]).to.have.property('name');",
									"    pm.expect(jsonData[0].name, '\"name\" must be \"User One\"').to.eql('User One');",
									"});",
									"",
									"pm.test(\"Check fields of the user second object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('email');",
									"    pm.expect(jsonData[1].email, '\"email\" must be \"user.second@test.comz\"').to.eql('user.second@test.comz');",
									"    pm.expect(jsonData[1]).to.have.property('name');",
									"    pm.expect(jsonData[1].name, '\"name\" must be \"User Second\"').to.eql('User Second');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/admin/users?ids=1&ids=2&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "ids",
									"value": "1"
								},
								{
									"key": "ids",
									"value": "2"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User  delete with id = 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"ivan.petrov@practicummail.ru\",\n  \"name\": \"Иван Петров\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/users/:userId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User  delete failed with id=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"ivan.petrov@practicummail.ru\",\n  \"name\": \"Иван Петров\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/users/:userId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main - admin: Category +",
			"item": [
				{
					"name": "Category add id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has category update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test category 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"pm.test(\"Test category 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Conserts\"').to.eql('Conserts');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Conserts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/categories"
					},
					"response": []
				},
				{
					"name": "Category add id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test category 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"pm.test(\"Test category 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Sports\"').to.eql('Sports');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sports\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/categories"
					},
					"response": []
				},
				{
					"name": "Category add id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test category 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test category 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Cinemas').to.eql('Cinemas');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Cinemas\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/categories"
					},
					"response": []
				},
				{
					"name": "Category add id=4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test category 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
									"});",
									"",
									"pm.test(\"Test category 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Theaters').to.eql('Theaters');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Theaters\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/categories"
					},
					"response": []
				},
				{
					"name": "Category add fail with duplicate name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Conserts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/categories"
					},
					"response": []
				},
				{
					"name": "Category delete by id=4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/admin/categories/:categoryId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"categories",
								":categoryId"
							],
							"variable": [
								{
									"key": "categoryId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Category delete failed by id=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{envMainService}}/admin/categories/999"
					},
					"response": []
				},
				{
					"name": "Category update by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test category 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"",
									"pm.test(\"Test category 'name' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData.name, '\"name\" must be \"Cinemas updated\"').to.eql('Cinemas updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Cinemas updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/categories/:categoryId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"categories",
								":categoryId"
							],
							"variable": [
								{
									"key": "categoryId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Category update failed by name empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/categories/:categoryId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"categories",
								":categoryId"
							],
							"variable": [
								{
									"key": "categoryId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Category update failed by name null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/categories/:categoryId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"categories",
								":categoryId"
							],
							"variable": [
								{
									"key": "categoryId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Category update failed by id = 999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sports updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/categories/:categoryId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"categories",
								":categoryId"
							],
							"variable": [
								{
									"key": "categoryId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main - private: Events +",
			"item": [
				{
					"name": "Events add(1) for user id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Test events 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Denis Matsuev consert\");",
									"});",
									"",
									"pm.test(\"Test events 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('annotation');",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Fantastic jazz performance.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('eventDate');",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2025-01-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test events 'location' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('location');",
									"    pm.expect(jsonResponse.location).to.eql({",
									"        \"lat\": 155.75417,",
									"        \"lon\": 137.62",
									"    });   ",
									"});",
									"",
									"pm.test(\"Test events 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('paid');",
									"    pm.expect(jsonResponse.paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test events 'participantLimit' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('participantLimit');",
									"    pm.expect(jsonResponse.participantLimit).to.eql(1000);",
									"});",
									"",
									"pm.test(\"Test events 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse.confirmedRequests).to.eql(0);",
									"",
									"});",
									"",
									"pm.test(\"Test events 'state' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('state');",
									"    pm.expect(jsonResponse.state).to.eql(\"PENDING\");",
									"});",
									"",
									"pm.test(\"Test events 'description' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('description');",
									"    pm.expect(jsonResponse.description).to.eql(\"Primarily a classical pianist, he also performs jazz occasionally.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('category');",
									"    pm.expect(jsonResponse.category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Test events 'requestModeration' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('requestModeration');",
									"    pm.expect(jsonResponse.requestModeration).to.be.false;",
									"    ",
									"});",
									"",
									"pm.test(\"Test events 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('initiator');",
									"    pm.expect(jsonResponse.initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test events 'publishedOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('publishedOn');",
									"    pm.expect(jsonResponse.publishedOn).to.be.null;",
									"});",
									"",
									"pm.test(\"Test events 'createdOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('createdOn');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Fantastic jazz performance.\",\n  \"category\": 1,\n  \"description\": \"Primarily a classical pianist, he also performs jazz occasionally.\",\n  \"eventDate\": \"2025-01-31 15:10:05\",\n  \"location\": {\n    \"lat\": 155.754166,\n    \"lon\": 137.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 1000,\n  \"requestModeration\": false,\n  \"title\": \"Denis Matsuev consert\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add (2) for user id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Test events 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Сплав на байдарках\");",
									"});",
									"",
									"pm.test(\"Test events 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('annotation');",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Сплав на байдарках похож на полет.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('eventDate');",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2024-12-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test events 'location' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('location');",
									"    pm.expect(jsonResponse.location).to.eql({",
									"        \"lat\": 55.754166,",
									"        \"lon\": 37.62",
									"    });   ",
									"});",
									"",
									"pm.test(\"Test events 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('paid');",
									"    pm.expect(jsonResponse.paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test events 'participantLimit' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('participantLimit');",
									"    pm.expect(jsonResponse.participantLimit).to.eql(10);",
									"});",
									"",
									"pm.test(\"Test events 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse.confirmedRequests).to.eql(0);",
									"",
									"});",
									"",
									"pm.test(\"Test events 'state' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('state');",
									"    pm.expect(jsonResponse.state).to.eql(\"PENDING\");",
									"});",
									"",
									"pm.test(\"Test events 'description' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('description');",
									"    pm.expect(jsonResponse.description).to.eql(\"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('category');",
									"    pm.expect(jsonResponse.category).to.eql({",
									"        \"id\": 2,",
									"        \"name\": \"Sports\"",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Test events 'requestModeration' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('requestModeration');",
									"    pm.expect(jsonResponse.requestModeration).to.be.false;",
									"    ",
									"});",
									"",
									"pm.test(\"Test events 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('initiator');",
									"    pm.expect(jsonResponse.initiator).to.eql({",
									"        \"id\": 2,",
									"        \"name\": \"User Second\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test events 'publishedOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('publishedOn');",
									"    pm.expect(jsonResponse.publishedOn).to.be.null;",
									"});",
									"",
									"pm.test(\"Test events 'createdOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('createdOn');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add(3) for user id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(3);",
									"});",
									"",
									"pm.test(\"Test events 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Swan Lake ballet\");",
									"});",
									"",
									"pm.test(\"Test events 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('annotation');",
									"    pm.expect(jsonResponse.annotation).to.eql(\"The most popular ballets of all time.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('eventDate');",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2025-06-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Test events 'location' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('location');",
									"    pm.expect(jsonResponse.location).to.eql({",
									"        \"lat\": 5.6,",
									"        \"lon\": 7.2",
									"    });   ",
									"});",
									"",
									"pm.test(\"Test events 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('paid');",
									"    pm.expect(jsonResponse.paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test events 'participantLimit' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('participantLimit');",
									"    pm.expect(jsonResponse.participantLimit).to.eql(5000);",
									"});",
									"",
									"pm.test(\"Test events 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse.confirmedRequests).to.eql(0);",
									"",
									"});",
									"",
									"pm.test(\"Test events 'state' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('state');",
									"    pm.expect(jsonResponse.state).to.eql(\"PENDING\");",
									"});",
									"",
									"pm.test(\"Test events 'description' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('description');",
									"    pm.expect(jsonResponse.description).to.eql(\"The scenario, initially in two acts, was fashioned from Russian and German folk tales and tells the story of Odette, a princess turned into a swan by an evil sorcerer's curse.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('category');",
									"    pm.expect(jsonResponse.category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Test events 'requestModeration' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('requestModeration');",
									"    pm.expect(jsonResponse.requestModeration).to.be.false;",
									"    ",
									"});",
									"",
									"pm.test(\"Test events 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('initiator');",
									"    pm.expect(jsonResponse.initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test events 'publishedOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('publishedOn');",
									"    pm.expect(jsonResponse.publishedOn).to.be.null;",
									"});",
									"",
									"pm.test(\"Test events 'createdOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('createdOn');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"The most popular ballets of all time.\",\n  \"category\": 1,\n  \"description\": \"The scenario, initially in two acts, was fashioned from Russian and German folk tales and tells the story of Odette, a princess turned into a swan by an evil sorcerer's curse.\",\n  \"eventDate\": \"2025-06-01 17:10:05\",\n  \"location\": {\n    \"lat\": 5.6,\n    \"lon\": 7.2\n  },\n  \"paid\": true,\n  \"participantLimit\": 5000,\n  \"requestModeration\": false,\n  \"title\": \"Swan Lake ballet\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add(4) for user id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(4);",
									"});",
									"",
									"pm.test(\"Test events 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Paraglider trip.\");",
									"});",
									"",
									"pm.test(\"Test events 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('annotation');",
									"    pm.expect(jsonResponse.annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('eventDate');",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2025-12-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test events 'location' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('location');",
									"    pm.expect(jsonResponse.location).to.eql({",
									"        \"lat\": 55.754154,",
									"        \"lon\": 37.61",
									"    });   ",
									"});",
									"",
									"pm.test(\"Test events 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('paid');",
									"    pm.expect(jsonResponse.paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test events 'participantLimit' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('participantLimit');",
									"    pm.expect(jsonResponse.participantLimit).to.eql(10);",
									"});",
									"",
									"pm.test(\"Test events 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse.confirmedRequests).to.eql(0);",
									"",
									"});",
									"",
									"pm.test(\"Test events 'state' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('state');",
									"    pm.expect(jsonResponse.state).to.eql(\"PENDING\");",
									"});",
									"",
									"pm.test(\"Test events 'description' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('description');",
									"    pm.expect(jsonResponse.description).to.eql(\"A paraglider is a love for all of your life.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('category');",
									"    pm.expect(jsonResponse.category).to.eql({",
									"        \"id\": 2,",
									"        \"name\": \"Sports\"",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Test events 'requestModeration' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('requestModeration');",
									"    pm.expect(jsonResponse.requestModeration).to.be.false;",
									"    ",
									"});",
									"",
									"pm.test(\"Test events 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('initiator');",
									"    pm.expect(jsonResponse.initiator).to.eql({",
									"        \"id\": 2,",
									"        \"name\": \"User Second\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test events 'publishedOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('publishedOn');",
									"    pm.expect(jsonResponse.publishedOn).to.be.null;",
									"});",
									"",
									"pm.test(\"Test events 'createdOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('createdOn');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"A paraglider is a free-flying, foot-launched aircraft.\",\n  \"category\": 2,\n  \"description\": \"A paraglider is a love for all of your life.\",\n  \"eventDate\": \"2025-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754154,\n    \"lon\": 37.61\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Paraglider trip.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add(5) for user id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(5);",
									"});",
									"",
									"pm.test(\"Test events 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Dream trip\");",
									"});",
									"",
									"pm.test(\"Test events 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('paid');",
									"    pm.expect(jsonResponse.paid).to.be.false;",
									"});",
									"",
									"pm.test(\"Test events 'participantLimit' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('participantLimit');",
									"    pm.expect(jsonResponse.participantLimit).to.eql(10);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Dream trip around mounting\",\n  \"category\": 2,\n  \"description\": \"Dream trip around mounting, you can't remenber it\",\n  \"eventDate\": \"2030-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 551.754154,\n    \"lon\": 371.61\n  },\n  \"paid\": false,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Dream trip\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 annotation empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 annotation null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": null,\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 annotation mussed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2  with invalid category null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": null,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2  with missed category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2  with invalid category=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 999,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 description empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 event date missed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 event date empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 paid empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": ,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 requestModeration empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 0,\n  \"requestModeration\": ,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 title empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 0,\n  \"requestModeration\": false,\n  \"title\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 title null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 0,\n  \"requestModeration\": false,\n  \"title\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=2 title missed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 0,\n  \"requestModeration\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get all for user id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test first event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('id');",
									"    pm.expect(jsonResponse[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"",
									"",
									"pm.test(\"Test first event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('title');",
									"    pm.expect(jsonResponse[0].title).to.eql(\"Denis Matsuev consert\");",
									"});",
									"",
									"pm.test(\"Test first event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[0].annotation).to.eql(\"Fantastic jazz performance.\");  ",
									"});",
									"",
									"pm.test(\"Test first event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[0].eventDate).to.eql(\"2025-01-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test first event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('paid');",
									"    pm.expect(jsonResponse[0].paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test first event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[0].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test first event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('category');",
									"    pm.expect(jsonResponse[0].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test efirst event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[0].initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									"//",
									"",
									"pm.test(\"Test second event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('id');",
									"    pm.expect(jsonResponse[1].id, '\"id\" must be 3').to.eql(3);",
									"});",
									"",
									"",
									"pm.test(\"Test second event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('title');",
									"    pm.expect(jsonResponse[1].title).to.eql(\"Swan Lake ballet\");",
									"});",
									"",
									"pm.test(\"Test second event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[1].annotation).to.eql(\"The most popular ballets of all time.\");  ",
									"});",
									"",
									"pm.test(\"Test second event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[1].eventDate).to.eql(\"2025-06-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Test second event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('paid');",
									"    pm.expect(jsonResponse[1].paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test second event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[1].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test second event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('category');",
									"    pm.expect(jsonResponse[1].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test second event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[1].initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/events?from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get failed for user id=999 events id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/e/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"e",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "999"
								},
								{
									"key": "eventsId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get failed for user id=999 events id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/e/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"e",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventsId",
									"value": "99"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update for user id=1 events id =3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(3);",
									"});",
									"",
									"pm.test(\"Test events 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Swan Lake ballet new\");",
									"});",
									"",
									"pm.test(\"Test events 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('annotation');",
									"    pm.expect(jsonResponse.annotation).to.eql(\"The most popular ballets of all time new.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('eventDate');",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2025-07-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Test events 'location' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('location');",
									"    pm.expect(jsonResponse.location).to.eql({",
									"        \"lat\": 5.69,",
									"        \"lon\": 7.29",
									"    });   ",
									"});",
									"",
									"pm.test(\"Test events 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('paid');",
									"    pm.expect(jsonResponse.paid).to.be.false;",
									"});",
									"",
									"pm.test(\"Test events 'participantLimit' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('participantLimit');",
									"    pm.expect(jsonResponse.participantLimit).to.eql(5001);",
									"});",
									"",
									"pm.test(\"Test events 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse.confirmedRequests).to.eql(0);",
									"",
									"});",
									"",
									"pm.test(\"Test events 'state' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('state');",
									"    pm.expect(jsonResponse.state).to.eql(\"PENDING\");",
									"});",
									"",
									"pm.test(\"Test events 'description' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('description');",
									"    pm.expect(jsonResponse.description).to.eql(\"The scenario, initially in two acts, was fashioned from Russian and German folk tales and tells the story of Odette, a princess turned into a swan by an evil sorcerer's curse new.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('category');",
									"    pm.expect(jsonResponse.category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Test events 'requestModeration' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('requestModeration');",
									"    pm.expect(jsonResponse.requestModeration).to.be.true;",
									"    ",
									"});",
									"",
									"pm.test(\"Test events 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('initiator');",
									"    pm.expect(jsonResponse.initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test events 'publishedOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('publishedOn');",
									"    pm.expect(jsonResponse.publishedOn).to.be.null;",
									"});",
									"",
									"pm.test(\"Test events 'createdOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('createdOn');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"The most popular ballets of all time new.\",\n  \"category\": 1,\n  \"description\": \"The scenario, initially in two acts, was fashioned from Russian and German folk tales and tells the story of Odette, a princess turned into a swan by an evil sorcerer's curse new.\",\n  \"eventDate\": \"2025-07-01 17:10:05\",\n  \"location\": {\n    \"lat\": 5.69,\n    \"lon\": 7.29\n  },\n  \"paid\": false,\n  \"participantLimit\": 5001,\n  \"requestModeration\": true,\n  \"title\": \"Swan Lake ballet new\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventsId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=1 events id=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"2023-10-11 23:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"requestModeration\": false,\n  \"stateAction\": \"CANCEL_REVIEW\",\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventsId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=1 events id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"2023-10-11 23:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"requestModeration\": false,\n  \"stateAction\": \"CANCEL_REVIEW\",\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventsId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=999 events id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"2023-10-11 23:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"requestModeration\": false,\n  \"stateAction\": \"CANCEL_REVIEW\",\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "999"
								},
								{
									"key": "eventsId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed for user id=2 annotation empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed for user id=2 description empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed for user id=2 title empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Описание\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events with id=1 get all for event id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test first event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('id');",
									"    pm.expect(jsonResponse.id, '\"id\" must be 1').to.eql(1);",
									"});",
									"",
									"",
									"pm.test(\"Test first event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Denis Matsuev consert\");",
									"});",
									"",
									"pm.test(\"Test first event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('annotation');",
									"    pm.expect(jsonResponse.annotation).to.eql(\"Fantastic jazz performance.\");  ",
									"});",
									"",
									"pm.test(\"Test first event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('eventDate');",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2025-01-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test first event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('paid');",
									"    pm.expect(jsonResponse.paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test first event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse.confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test first event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('category');",
									"    pm.expect(jsonResponse.category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test efirst event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('initiator');",
									"    pm.expect(jsonResponse.initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventsId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events with id=1 get failed all for event id=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventsId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main - admin: Event +",
			"item": [
				{
					"name": "Event admin get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test search stat response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 5').to.eql(5);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/events"
					},
					"response": []
				},
				{
					"name": "Event admin get for user with id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test first event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('id');",
									"    pm.expect(jsonResponse[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"",
									"",
									"pm.test(\"Test first event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('title');",
									"    pm.expect(jsonResponse[0].title).to.eql(\"Denis Matsuev consert\");",
									"});",
									"",
									"pm.test(\"Test first event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[0].annotation).to.eql(\"Fantastic jazz performance.\");  ",
									"});",
									"",
									"pm.test(\"Test first event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[0].eventDate).to.eql(\"2025-01-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test first event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('paid');",
									"    pm.expect(jsonResponse[0].paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test first event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[0].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test first event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('category');",
									"    pm.expect(jsonResponse[0].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test efirst event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[0].initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									"//",
									"",
									"pm.test(\"Test second event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('id');",
									"    pm.expect(jsonResponse[1].id, '\"id\" must be 3').to.eql(3);",
									"});",
									"",
									"",
									"pm.test(\"Test second event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('title');",
									"    pm.expect(jsonResponse[1].title).to.eql(\"Swan Lake ballet new\");",
									"});",
									"",
									"pm.test(\"Test second event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[1].annotation).to.eql(\"The most popular ballets of all time new.\");  ",
									"});",
									"",
									"pm.test(\"Test second event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[1].eventDate).to.eql(\"2025-07-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Test second event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('paid');",
									"    pm.expect(jsonResponse[1].paid).to.be.false;",
									"});",
									"",
									"pm.test(\"Test second event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[1].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test second event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('category');",
									"    pm.expect(jsonResponse[1].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test second event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[1].initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Conserts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events?users=1&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "users",
									"value": "1"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event admin get for  category id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test first event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('id');",
									"    pm.expect(jsonResponse[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"",
									"",
									"pm.test(\"Test first event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('title');",
									"    pm.expect(jsonResponse[0].title).to.eql(\"Denis Matsuev consert\");",
									"});",
									"",
									"pm.test(\"Test first event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[0].annotation).to.eql(\"Fantastic jazz performance.\");  ",
									"});",
									"",
									"pm.test(\"Test first event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[0].eventDate).to.eql(\"2025-01-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test first event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('paid');",
									"    pm.expect(jsonResponse[0].paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test first event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[0].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test first event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('category');",
									"    pm.expect(jsonResponse[0].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test efirst event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[0].initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									"//",
									"",
									"pm.test(\"Test second event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('id');",
									"    pm.expect(jsonResponse[1].id, '\"id\" must be 3').to.eql(3);",
									"});",
									"",
									"",
									"pm.test(\"Test second event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('title');",
									"    pm.expect(jsonResponse[1].title).to.eql(\"Swan Lake ballet new\");",
									"});",
									"",
									"pm.test(\"Test second event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[1].annotation).to.eql(\"The most popular ballets of all time new.\");  ",
									"});",
									"",
									"pm.test(\"Test second event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[1].eventDate).to.eql(\"2025-07-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Test second event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('paid');",
									"    pm.expect(jsonResponse[1].paid).to.be.false;",
									"});",
									"",
									"pm.test(\"Test second event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[1].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test second event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('category');",
									"    pm.expect(jsonResponse[1].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test second event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[1].initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Conserts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events?categories=1&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event admin get for  DATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Test search events response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"",
									"pm.test(\"Test first event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('id');",
									"    pm.expect(jsonResponse[0].id, '\"id\" must be 1').to.eql(3);",
									"});",
									"",
									"",
									"pm.test(\"Test first event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('title');",
									"    pm.expect(jsonResponse[0].title).to.eql(\"Swan Lake ballet new\");",
									"});",
									"",
									"pm.test(\"Test first event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[0].annotation).to.eql(\"The most popular ballets of all time new.\");  ",
									"});",
									"",
									"pm.test(\"Test first event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[0].eventDate).to.eql(\"2025-07-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Test first event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('paid');",
									"    pm.expect(jsonResponse[0].paid).to.be.false;",
									"});",
									"",
									"pm.test(\"Test first event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[0].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test first event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('category');",
									"    pm.expect(jsonResponse[0].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test efirst event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[0].initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test second event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('id');",
									"    pm.expect(jsonResponse[1].id, '\"id\" must be 4').to.eql(4);",
									"});",
									"",
									"",
									"pm.test(\"Test second event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('title');",
									"    pm.expect(jsonResponse[1].title).to.eql(\"Paraglider trip.\");",
									"});",
									"",
									"pm.test(\"Test second event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[1].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");  ",
									"});",
									"",
									"pm.test(\"Test second event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[1].eventDate).to.eql(\"2025-12-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test second event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('paid');",
									"    pm.expect(jsonResponse[1].paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test second event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[1].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test second event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('category');",
									"    pm.expect(jsonResponse[1].category).to.eql({",
									"        \"id\": 2,",
									"        \"name\": \"Sports\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test second event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[1]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[1].initiator).to.eql({",
									"        \"id\": 2,",
									"        \"name\": \"User Second\"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Conserts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events?rangeStart=2025-02-06%2011%3A00%3A23&rangeEnd=2026-09-06%2011%3A00%3A23&from=0&size=10\n",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2025-02-06%2011%3A00%3A23"
								},
								{
									"key": "rangeEnd",
									"value": "2026-09-06%2011%3A00%3A23"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10\n"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event admin get for  DATE for user with id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Test search events response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"",
									"pm.test(\"Test first event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('id');",
									"    pm.expect(jsonResponse[0].id, '\"id\" must be 1').to.eql(1);",
									"});",
									"",
									"",
									"pm.test(\"Test first event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('title');",
									"    pm.expect(jsonResponse[0].title).to.eql(\"Denis Matsuev consert\");",
									"});",
									"",
									"pm.test(\"Test first event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('annotation');",
									"    pm.expect(jsonResponse[0].annotation).to.eql(\"Fantastic jazz performance.\");  ",
									"});",
									"",
									"pm.test(\"Test first event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('eventDate');",
									"    pm.expect(jsonResponse[0].eventDate).to.eql(\"2025-01-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Test first event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('paid');",
									"    pm.expect(jsonResponse[0].paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test first event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse[0].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Test first event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('category');",
									"    pm.expect(jsonResponse[0].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test efirst event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse[0]).to.have.property('initiator');",
									"    pm.expect(jsonResponse[0].initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Conserts\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events?users=1&rangeStart=2023-09-06%2011%3A00%3A23&rangeEnd=2026-09-06%2011%3A00%3A23&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "users",
									"value": "1"
								},
								{
									"key": "rangeStart",
									"value": "2023-09-06%2011%3A00%3A23"
								},
								{
									"key": "rangeEnd",
									"value": "2026-09-06%2011%3A00%3A23"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events admin update id =3 Published",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(3);",
									"});",
									"",
									"pm.test(\"Test events 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Swan Lake ballet new1\");",
									"});",
									"",
									"pm.test(\"Test events 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('annotation');",
									"    pm.expect(jsonResponse.annotation).to.eql(\"The most popular ballets of all time new1.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('eventDate');",
									"    pm.expect(jsonResponse.eventDate).to.eql(\"2025-07-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Test events 'location' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('location');",
									"    pm.expect(jsonResponse.location).to.eql({",
									"        \"lat\": 5.691,",
									"        \"lon\": 7.291",
									"    });   ",
									"});",
									"",
									"pm.test(\"Test events 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('paid');",
									"    pm.expect(jsonResponse.paid).to.be.true;",
									"});",
									"",
									"pm.test(\"Test events 'participantLimit' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('participantLimit');",
									"    pm.expect(jsonResponse.participantLimit).to.eql(50011);",
									"});",
									"",
									"pm.test(\"Test events 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('confirmedRequests');",
									"    pm.expect(jsonResponse.confirmedRequests).to.eql(0);",
									"",
									"});",
									"",
									"pm.test(\"Test events 'state' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('state');",
									"    pm.expect(jsonResponse.state).to.eql(\"PUBLISHED\");",
									"});",
									"",
									"pm.test(\"Test events 'description' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('description');",
									"    pm.expect(jsonResponse.description).to.eql(\"The scenario, initially in two acts, was fashioned from Russian and German folk tales and tells the story of Odette, a princess turned into a swan by an evil sorcerer's curse new1.\");  ",
									"});",
									"",
									"pm.test(\"Test events 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('category');",
									"    pm.expect(jsonResponse.category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Test events 'requestModeration' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('requestModeration');",
									"    pm.expect(jsonResponse.requestModeration).to.be.false;",
									"    ",
									"});",
									"",
									"pm.test(\"Test events 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('initiator');",
									"    pm.expect(jsonResponse.initiator).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"User One\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test events 'publishedOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('publishedOn');",
									"});",
									"",
									"pm.test(\"Test events 'createdOn' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('createdOn');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"The most popular ballets of all time new1.\",\n  \"category\": 1,\n  \"description\": \"The scenario, initially in two acts, was fashioned from Russian and German folk tales and tells the story of Odette, a princess turned into a swan by an evil sorcerer's curse new1.\",\n  \"eventDate\": \"2025-07-01 17:10:05\",\n  \"location\": {\n    \"lat\": 5.691,\n    \"lon\": 7.291\n  },\n  \"paid\": true,\n  \"participantLimit\": 50011,\n  \"requestModeration\": false,\n   \"stateAction\": \"PUBLISH_EVENT\",\n  \"title\": \"Swan Lake ballet new1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events admin update id =4 Published",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(4);",
									"});",
									"",
									"pm.test(\"Test events 'state' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('state');",
									"    pm.expect(jsonResponse.state).to.eql(\"PUBLISHED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stateAction\": \"PUBLISH_EVENT\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events admin update id =5 Published",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has events update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test events 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.eql(5);",
									"});",
									"",
									"pm.test(\"Test events 'state' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('state');",
									"    pm.expect(jsonResponse.state).to.eql(\"PUBLISHED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stateAction\": \"PUBLISH_EVENT\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events admin update id=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"2023-10-11 23:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"requestModeration\": false,\n  \"stateAction\": \"CANCEL_REVIEW\",\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "eventsId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed for  eventId=2 annotation empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed for  eventId=2  with invalid category=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 999,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed eventId=2 description empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed for  eventId=2 paid empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": ,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed for  eventId=2 requestModeration empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 0,\n  \"requestModeration\": ,\n  \"title\": \"Сплав на байдарках\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events update failed for  eventId=2 title empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 0,\n  \"requestModeration\": false,\n  \"title\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/events/:eventsId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"events",
								":eventsId"
							],
							"variable": [
								{
									"key": "eventsId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for  eventId=2 title missed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 2,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 0,\n  \"requestModeration\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main -admin: Event collection(Compilation) +",
			"item": [
				{
					"name": "Compilation add pinned false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.events[0].annotation).to.eql(\"Сплав на байдарках похож на полет.\");",
									"    pm.expect(responseData.events[1].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.events[0].title).to.eql(\"Сплав на байдарках\");",
									"    pm.expect(responseData.events[1].title).to.eql(\"Paraglider trip.\");",
									"});",
									"",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test user 'pinned' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pinned');",
									"    pm.expect(jsonData.pinned, '\"pinned\" must be \"false\"').to.eql(false);",
									"});",
									"",
									"pm.test(\"Test user 'title' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData.title, '\"title\" must be \"Summer Sport\"').to.eql('Summer Sport');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [\n    2,\n    4\n  ],\n  \"pinned\": false,\n  \"title\": \"Summer Sport\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/compilations"
					},
					"response": []
				},
				{
					"name": "Compilation add pinned=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.events[0].annotation).to.eql(\"Fantastic jazz performance.\");",
									"    pm.expect(responseData.events[1].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.events[0].title).to.eql(\"Denis Matsuev consert\");",
									"    pm.expect(responseData.events[1].title).to.eql(\"Paraglider trip.\");",
									"});",
									"",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test user 'pinned' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pinned');",
									"    pm.expect(jsonData.pinned, '\"pinned\" must be \"false\"').to.eql(true);",
									"});",
									"",
									"pm.test(\"Test user 'title' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData.title, '\"title\" must be \"Set 1 and 4\"').to.eql('Set 1 and 4');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [\n    1,\n    4\n  ],\n  \"pinned\": true,\n  \"title\": \"Set 1 and 4\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/compilations"
					},
					"response": []
				},
				{
					"name": "Compilation add events empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [1],\n  \"pinned\": false,\n  \"title\": \"Empty\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/compilations"
					},
					"response": []
				},
				{
					"name": "Compilation add event with id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [],\n  \"pinned\": false,\n  \"title\": \"Empty\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/compilations"
					},
					"response": []
				},
				{
					"name": "Compilation add failed pinned = null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": null,\n  \"title\": \"Летние концерты\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/compilations"
					},
					"response": []
				},
				{
					"name": "Compilation add failed title = null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": false,\n  \"title\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/compilations"
					},
					"response": []
				},
				{
					"name": "Compilation add failed title empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [\n    1,\n    2,\n    3\n  ],\n  \"pinned\": false,\n  \"title\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{envMainService}}/admin/compilations"
					},
					"response": []
				},
				{
					"name": "Compilation delete id = 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/compilations/:compilationId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"compilations",
								":compilationId"
							],
							"variable": [
								{
									"key": "compilationId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Compilation delete failed  id = 999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/compilations/:compilationId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"compilations",
								":compilationId"
							],
							"variable": [
								{
									"key": "compilationId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Compilation update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test compilation 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('id');",
									"    pm.expect(jsonResponse.id, '\"id\" must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Test compilation 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('title');",
									"    pm.expect(jsonResponse.title).to.eql(\"Необычные фотозоны\");",
									"});",
									"",
									"pm.test(\"Test compilation 'pinned' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('pinned');",
									"    pm.expect(jsonResponse.pinned).to.be.true;",
									"});",
									"",
									"pm.test(\"Test events field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('events');",
									"    pm.expect(jsonResponse.events).to.be.an('array');",
									"    pm.expect(jsonResponse.events).to.have.lengthOf(4);",
									"});",
									"",
									"pm.test(\"Test first event 'id' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('id');",
									"});",
									"",
									"pm.test(\"Test first event 'title' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('title');",
									"});",
									"",
									"pm.test(\"Test first event 'annotation' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('annotation');",
									"});",
									"",
									"pm.test(\"Test first event 'eventDate' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('eventDate');",
									"});",
									"",
									"pm.test(\"Test first event 'category' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('category');",
									"    pm.expect(jsonResponse.events[0].category).to.eql({",
									"        \"id\": 1,",
									"        \"name\": \"Conserts\"",
									"    });",
									"});",
									"",
									"pm.test(\"Test first event 'confirmedRequests' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('confirmedRequests');",
									"});",
									"",
									"pm.test(\"Test first event 'initiator' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('initiator');",
									"});",
									"",
									"pm.test(\"Test first event 'paid' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('paid');",
									"});",
									"",
									"pm.test(\"Test first event 'views' field\", function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.events[0]).to.have.property('views');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [\n    1,\n    2,\n    3,\n    4\n  ],\n  \"pinned\": true,\n  \"title\": \"Необычные фотозоны\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/compilations/:compilationId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"compilations",
								":compilationId"
							],
							"variable": [
								{
									"key": "compilationId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Compilation update  empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"events\": [],\n  \"pinned\": false,\n  \"title\": \"Empty\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/admin/compilations/:compilationId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"admin",
								"compilations",
								":compilationId"
							],
							"variable": [
								{
									"key": "compilationId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main - private: request to participate",
			"item": [
				{
					"name": "User (id=2) add request to eventId=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests?eventId=3",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "3"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User (id=3) add request to eventId=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests?eventId=3",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "3"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User (id=3) add request to eventId=4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests?eventId=4",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "4"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User add request failed  initiator of the event cannot add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests?eventId=4",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "4"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User add failed  unpublished request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests?eventId=3",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "3"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User (id=3) get all requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test search user response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Check fields of the second user object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('created');",
									"    pm.expect(jsonData[0]).to.have.property('event');",
									"    pm.expect(jsonData[0].event, '\"event\" must be \"3\"').to.eql(3);",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be \"2\"').to.eql(2);",
									"    pm.expect(jsonData[0]).to.have.property('requester');",
									"    pm.expect(jsonData[0].requester, '\"requester\" must be \"3\"').to.eql(3);",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"CONFIRMED\"').to.eql('CONFIRMED');",
									"});",
									"",
									"pm.test(\"Check fields of the second object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('created');;",
									"    pm.expect(jsonData[1]).to.have.property('event');",
									"    pm.expect(jsonData[1].event, '\"event\" must be \"4\"').to.eql(4);",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be \"3\"').to.eql(3);",
									"    pm.expect(jsonData[1]).to.have.property('requester');",
									"    pm.expect(jsonData[1].requester, '\"requester\" must be \"3\"').to.eql(3);",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"CONFIRMED\"').to.eql('CONFIRMED');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User (id=1) get 0 request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test search user response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User (id=999) get failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"variable": [
								{
									"key": "userId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User cancel request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has request update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test request 'created' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('created');",
									"});",
									"",
									"pm.test(\"Test request 'event' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('event');",
									"    pm.expect(jsonData.event, '\"event\" must be \"4\"').to.eql(4);",
									"});",
									"",
									"pm.test(\"Test request 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test request 'requester' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('requester');",
									"    pm.expect(jsonData.requester, '\"requester\" must be \"3\"').to.eql(3);",
									"});",
									"pm.test(\"Test request 'status' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status, '\"status\" must be \"CANCELED').to.eql('CANCELED');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests/:requestId/cancel",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests",
								":requestId",
								"cancel"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "requestId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User cancel request failed with unexisted id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests/:requestId/cancel",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests",
								":requestId",
								"cancel"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "requestId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User cancel request failed with bad request id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests/:requestId/cancel",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests",
								":requestId",
								"cancel"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "requestId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User (id=3) get all requests after cancelation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test search user response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Check fields of the second user object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('created');",
									"    pm.expect(jsonData[0]).to.have.property('event');",
									"    pm.expect(jsonData[0].event, '\"event\" must be \"3\"').to.eql(3);",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be \"2\"').to.eql(2);",
									"    pm.expect(jsonData[0]).to.have.property('requester');",
									"    pm.expect(jsonData[0].requester, '\"requester\" must be \"3\"').to.eql(3);",
									"    pm.expect(jsonData[0]).to.have.property('status');",
									"    pm.expect(jsonData[0].status, '\"status\" must be \"CONFIRMED\"').to.eql('CONFIRMED');",
									"});",
									"",
									"pm.test(\"Check fields of the second object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1]).to.have.property('created');",
									"    pm.expect(jsonData[1]).to.have.property('event');",
									"    pm.expect(jsonData[1].event, '\"event\" must be \"4\"').to.eql(4);",
									"    pm.expect(jsonData[1]).to.have.property('id');",
									"    pm.expect(jsonData[1].id, '\"id\" must be \"3\"').to.eql(3);",
									"    pm.expect(jsonData[1]).to.have.property('requester');",
									"    pm.expect(jsonData[1].requester, '\"requester\" must be \"3\"').to.eql(3);",
									"    pm.expect(jsonData[1]).to.have.property('status');",
									"    pm.expect(jsonData[1].status, '\"status\" must be \"CANCELED\"').to.eql('CANCELED');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/users/:userId/requests",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"requests"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main - public: Event collection",
			"item": [
				{
					"name": "Event get all [][]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event annotations response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);",
									"});",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].events[0].annotation).to.eql(\"Сплав на байдарках похож на полет.\");",
									"    pm.expect(responseData[0].events[1].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");",
									"    pm.expect(responseData[2].events[0].annotation).to.eql(\"Fantastic jazz performance.\");",
									"    pm.expect(responseData[2].events[1].annotation).to.eql(\"Сплав на байдарках похож на полет.\");",
									"    pm.expect(responseData[2].events[2].annotation).to.eql(\"The most popular ballets of all time new1.\");",
									"    pm.expect(responseData[2].events[3].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{envMainService}}/compilations"
					},
					"response": []
				},
				{
					"name": "Event get all [][] pinned true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event annotations response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].events[0].annotation).to.eql(\"Fantastic jazz performance.\");",
									"    pm.expect(responseData[0].events[1].annotation).to.eql(\"Сплав на байдарках похож на полет.\");",
									"    pm.expect(responseData[0].events[2].annotation).to.eql(\"The most popular ballets of all time new1.\");",
									"    pm.expect(responseData[0].events[3].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/compilations?pinned=true&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"compilations"
							],
							"query": [
								{
									"key": "pinned",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event get all [][] pinned false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event annotations response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].events[0].annotation).to.eql(\"Сплав на байдарках похож на полет.\");",
									"    pm.expect(responseData[0].events[1].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/compilations?pinned=false&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"compilations"
							],
							"query": [
								{
									"key": "pinned",
									"value": "false"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event get by id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event lemgth response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.events.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.events[0].annotation).to.eql(\"Сплав на байдарках похож на полет.\");",
									"    pm.expect(responseData.events[1].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.events[0].title).to.eql(\"Сплав на байдарках\");",
									"    pm.expect(responseData.events[1].title).to.eql(\"Paraglider trip.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/compilations/:compId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"compilations",
								":compId"
							],
							"variable": [
								{
									"key": "compId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event get failed  by id=999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/compilations/:compId",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"compilations",
								":compId"
							],
							"variable": [
								{
									"key": "compId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main - public: Events",
			"item": [
				{
					"name": "Events get: text=swan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event length response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].annotation).to.eql(\"The most popular ballets of all time new1.\");",
									"});",
									"",
									"pm.test(\"Check category id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].category.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check category name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].category.name).to.eql(\"Conserts\");",
									"});",
									"",
									"pm.test(\"Check event confirmedRequests\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].confirmedRequests).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check event eventDate\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].eventDate).to.eql(\"2025-07-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Check event id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].id).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check initiator id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].initiator.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check initiator name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].initiator.name).to.eql(\"User One\");",
									"});",
									"",
									"pm.test(\"Check event paid\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].paid).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].title).to.eql(\"Swan Lake ballet new1\");",
									"});",
									"",
									"pm.test(\"Check event views\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].views).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/events?text=swan&rangeStart=2021-08-29%2020%3A00%3A10&rangeEnd=2026-08-29%2020%3A00%3A10&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "text",
									"value": "swan"
								},
								{
									"key": "rangeStart",
									"value": "2021-08-29%2020%3A00%3A10"
								},
								{
									"key": "rangeEnd",
									"value": "2026-08-29%2020%3A00%3A10"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get: cat=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event length response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].annotation).to.eql(\"The most popular ballets of all time new1.\");",
									"});",
									"",
									"pm.test(\"Check category id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].category.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check category name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].category.name).to.eql(\"Conserts\");",
									"});",
									"",
									"pm.test(\"Check event confirmedRequests\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].confirmedRequests).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check event eventDate\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].eventDate).to.eql(\"2025-07-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Check event id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].id).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check initiator id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].initiator.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check initiator name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].initiator.name).to.eql(\"User One\");",
									"});",
									"",
									"pm.test(\"Check event paid\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].paid).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].title).to.eql(\"Swan Lake ballet new1\");",
									"});",
									"",
									"pm.test(\"Check event views\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].views).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/events?categories=1&rangeStart=2021-08-29%2020%3A00%3A10&rangeEnd=2026-08-29%2020%3A00%3A10&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "rangeStart",
									"value": "2021-08-29%2020%3A00%3A10"
								},
								{
									"key": "rangeEnd",
									"value": "2026-08-29%2020%3A00%3A10"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get: paid=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event length response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].annotation).to.eql(\"The most popular ballets of all time new1.\");",
									"});",
									"",
									"pm.test(\"Check category id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].category.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check category name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].category.name).to.eql(\"Conserts\");",
									"});",
									"",
									"pm.test(\"Check event confirmedRequests\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].confirmedRequests).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check event eventDate\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].eventDate).to.eql(\"2025-07-01 17:10:05\");",
									"});",
									"",
									"pm.test(\"Check event id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].id).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check initiator id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].initiator.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check initiator name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].initiator.name).to.eql(\"User One\");",
									"});",
									"",
									"pm.test(\"Check event paid\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].paid).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].title).to.eql(\"Swan Lake ballet new1\");",
									"});",
									"",
									"pm.test(\"Check event views\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].views).to.eql(null);",
									"});",
									"",
									"//",
									"",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].annotation).to.eql(\"A paraglider is a free-flying, foot-launched aircraft.\");",
									"});",
									"",
									"pm.test(\"Check category id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].category.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check category name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].category.name).to.eql(\"Sports\");",
									"});",
									"",
									"pm.test(\"Check event confirmedRequests\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].confirmedRequests).to.eql(1);",
									"});",
									"",
									"pm.test(\"Check event eventDate\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].eventDate).to.eql(\"2025-12-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Check event id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].id).to.eql(4);",
									"});",
									"",
									"pm.test(\"Check initiator id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].initiator.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check initiator name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].initiator.name).to.eql(\"User Second\");",
									"});",
									"",
									"pm.test(\"Check event paid\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].paid).to.eql(true);",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].title).to.eql(\"Paraglider trip.\");",
									"});",
									"",
									"pm.test(\"Check event views\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[1].views).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/events?paid=true&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "paid",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get: paid=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event length response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].annotation).to.eql(\"Dream trip around mounting\");",
									"});",
									"",
									"pm.test(\"Check category id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].category.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check category name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].category.name).to.eql(\"Sports\");",
									"});",
									"",
									"pm.test(\"Check event confirmedRequests\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Check event eventDate\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].eventDate).to.eql(\"2030-12-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Check event id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].id).to.eql(5);",
									"});",
									"",
									"pm.test(\"Check initiator id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].initiator.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check initiator name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].initiator.name).to.eql(\"User Second\");",
									"});",
									"",
									"pm.test(\"Check event paid\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].paid).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].title).to.eql(\"Dream trip\");",
									"});",
									"",
									"pm.test(\"Check event views\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData[0].views).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/events?paid=false&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "paid",
									"value": "false"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get:cat=0, available= true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/events?onlyAvailable=true&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "onlyAvailable",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get:cat=0, available=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test search eventsresponse\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/events?onlyAvailable=false&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "onlyAvailable",
									"value": "false"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get: sort=event_date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test search user response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/events?rangeStart=2021-08-29%2020%3A00%3A10&rangeEnd=2026-10-29%2020%3A00%3A10&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2021-08-29%2020%3A00%3A10"
								},
								{
									"key": "rangeEnd",
									"value": "2026-10-29%2020%3A00%3A10"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events get: sort=views",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Has user update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test search event response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
									"});",
									"",
									"pm.test(\"Test user 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('id');",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);",
									"});",
									"pm.test(\"Test user 'title' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property('title');",
									"    pm.expect(jsonData[0].title, '\"title\" must be \"Swan Lake ballet new1\"').to.eql('Swan Lake ballet new1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{envMainService}}/events?rangeStart=2021-08-29%2020%3A00%3A10&rangeEnd=2025-08-29%2020%3A00%3A10&sort=VIEWS&from=0&size=10",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2021-08-29%2020%3A00%3A10"
								},
								{
									"key": "rangeEnd",
									"value": "2025-08-29%2020%3A00%3A10"
								},
								{
									"key": "sort",
									"value": "VIEWS"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event get with id=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Has event  update response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test event 'id' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);",
									"});",
									"",
									"",
									"pm.test(\"Check event annotations\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.annotation).to.eql(\"Dream trip around mounting\");",
									"});",
									"",
									"pm.test(\"Check category id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.category.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check category name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.category.name).to.eql(\"Sports\");",
									"});",
									"",
									"pm.test(\"Check event confirmedRequests\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.confirmedRequests).to.eql(0);",
									"});",
									"",
									"pm.test(\"Check event eventDate\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.eventDate).to.eql(\"2030-12-31 15:10:05\");",
									"});",
									"",
									"pm.test(\"Check event id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(5);",
									"});",
									"",
									"pm.test(\"Check initiator id\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.initiator.id).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check initiator name\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.initiator.name).to.eql(\"User Second\");",
									"});",
									"",
									"pm.test(\"Check event paid\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.paid).to.eql(false);",
									"});",
									"",
									"pm.test(\"Check event titles\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.title).to.eql(\"Dream trip\");",
									"});",
									"",
									"pm.test(\"Check event views\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.views).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{envMainService}}/events/5"
					},
					"response": []
				}
			]
		},
		{
			"name": "Main - private : user after",
			"item": [
				{
					"name": "Events add f for user id=1 events id =3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"2023-10-11 23:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"requestModeration\": false,\n  \"stateAction\": \"CANCEL_REVIEW\",\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId/requests",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId",
								"requests"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventsId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events add failed for user id=3 events id =3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 3,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"2023-10-11 23:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"requestModeration\": false,\n  \"stateAction\": \"CANCEL_REVIEW\",\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envMainService}}/users/:userId/events/:eventsId/requests",
							"host": [
								"{{envMainService}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventsId",
								"requests"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "eventsId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "envStatService",
			"value": "envStatService"
		}
	]
}